vector<int> generateSubsequenceSums(const vector<int>& nums) {
    int n = nums.size();
    vector<int> result;

    // There are 2^n possible subsequences
    for (int mask = 0; mask < (1 << n); ++mask) {
        int sum = 0;
        for (int i = 0; i < n; ++i) {
            // If the i-th bit is set in mask, include nums[i]
            if (mask & (1 << i)) {
                sum += nums[i];
            }
        }
        result.push_back(sum);
    }

    return result;
}
